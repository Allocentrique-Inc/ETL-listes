// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package listes_iptoki.instruments_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Instruments Purpose: Extraire les instrments de musique depuis Wikipedia<br>
 * Description: Sources sont :

 https://fr.wikipedia.org/wiki/Liste_des_instruments_de_musique

 et

 https://en.wikipedia.org/wiki/List_of_musical_instruments

 Note: Pour la modification Ã  ces pages, un flux RSS existe pour les changements. <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status DEV
 */
public class Instruments implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Instruments";
	private final String projectName = "LISTES_IPTOKI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Instruments.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Instruments.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tHttpRequest_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractRegexFields_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractRegexFields_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractRegexFields_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputJSON_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHttpRequest_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class jsonStruct implements
			routines.system.IPersistableRow<jsonStruct> {
		final static byte[] commonByteArrayLock_LISTES_IPTOKI_Instruments = new byte[0];
		static byte[] commonByteArray_LISTES_IPTOKI_Instruments = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String lien;

		public String getLien() {
			return this.lien;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.nom == null) ? 0 : this.nom.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final jsonStruct other = (jsonStruct) obj;

			if (this.nom == null) {
				if (other.nom != null)
					return false;

			} else if (!this.nom.equals(other.nom))

				return false;

			return true;
		}

		public void copyDataTo(jsonStruct other) {

			other.nom = this.nom;
			other.lien = this.lien;

		}

		public void copyKeysDataTo(jsonStruct other) {

			other.nom = this.nom;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LISTES_IPTOKI_Instruments.length) {
					if (length < 1024
							&& commonByteArray_LISTES_IPTOKI_Instruments.length == 0) {
						commonByteArray_LISTES_IPTOKI_Instruments = new byte[1024];
					} else {
						commonByteArray_LISTES_IPTOKI_Instruments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LISTES_IPTOKI_Instruments, 0,
						length);
				strReturn = new String(
						commonByteArray_LISTES_IPTOKI_Instruments, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LISTES_IPTOKI_Instruments) {

				try {

					int length = 0;

					this.nom = readString(dis);

					this.lien = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.lien, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nom=" + nom);
			sb.append(",lien=" + lien);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(jsonStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nom, other.nom);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_LISTES_IPTOKI_Instruments = new byte[0];
		static byte[] commonByteArray_LISTES_IPTOKI_Instruments = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public String lien;

		public String getLien() {
			return this.lien;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.nom == null) ? 0 : this.nom.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.nom == null) {
				if (other.nom != null)
					return false;

			} else if (!this.nom.equals(other.nom))

				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.nom = this.nom;
			other.lien = this.lien;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.nom = this.nom;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LISTES_IPTOKI_Instruments.length) {
					if (length < 1024
							&& commonByteArray_LISTES_IPTOKI_Instruments.length == 0) {
						commonByteArray_LISTES_IPTOKI_Instruments = new byte[1024];
					} else {
						commonByteArray_LISTES_IPTOKI_Instruments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LISTES_IPTOKI_Instruments, 0,
						length);
				strReturn = new String(
						commonByteArray_LISTES_IPTOKI_Instruments, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LISTES_IPTOKI_Instruments) {

				try {

					int length = 0;

					this.nom = readString(dis);

					this.lien = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nom, dos);

				// String

				writeString(this.lien, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nom=" + nom);
			sb.append(",lien=" + lien);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nom, other.nom);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LISTES_IPTOKI_Instruments = new byte[0];
		static byte[] commonByteArray_LISTES_IPTOKI_Instruments = new byte[0];

		public String lien;

		public String getLien() {
			return this.lien;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LISTES_IPTOKI_Instruments.length) {
					if (length < 1024
							&& commonByteArray_LISTES_IPTOKI_Instruments.length == 0) {
						commonByteArray_LISTES_IPTOKI_Instruments = new byte[1024];
					} else {
						commonByteArray_LISTES_IPTOKI_Instruments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LISTES_IPTOKI_Instruments, 0,
						length);
				strReturn = new String(
						commonByteArray_LISTES_IPTOKI_Instruments, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LISTES_IPTOKI_Instruments) {

				try {

					int length = 0;

					this.lien = readString(dis);

					this.nom = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.lien, dos);

				// String

				writeString(this.nom, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("lien=" + lien);
			sb.append(",nom=" + nom);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LISTES_IPTOKI_Instruments = new byte[0];
		static byte[] commonByteArray_LISTES_IPTOKI_Instruments = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String lien;

		public String getLien() {
			return this.lien;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.nom == null) ? 0 : this.nom.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.nom == null) {
				if (other.nom != null)
					return false;

			} else if (!this.nom.equals(other.nom))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.lien = this.lien;
			other.nom = this.nom;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.nom = this.nom;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LISTES_IPTOKI_Instruments.length) {
					if (length < 1024
							&& commonByteArray_LISTES_IPTOKI_Instruments.length == 0) {
						commonByteArray_LISTES_IPTOKI_Instruments = new byte[1024];
					} else {
						commonByteArray_LISTES_IPTOKI_Instruments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LISTES_IPTOKI_Instruments, 0,
						length);
				strReturn = new String(
						commonByteArray_LISTES_IPTOKI_Instruments, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LISTES_IPTOKI_Instruments) {

				try {

					int length = 0;

					this.lien = readString(dis);

					this.nom = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.lien, dos);

				// String

				writeString(this.nom, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("lien=" + lien);
			sb.append(",nom=" + nom);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nom, other.nom);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LISTES_IPTOKI_Instruments = new byte[0];
		static byte[] commonByteArray_LISTES_IPTOKI_Instruments = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String lien;

		public String getLien() {
			return this.lien;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.nom == null) ? 0 : this.nom.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.nom == null) {
				if (other.nom != null)
					return false;

			} else if (!this.nom.equals(other.nom))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.lien = this.lien;
			other.nom = this.nom;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.nom = this.nom;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LISTES_IPTOKI_Instruments.length) {
					if (length < 1024
							&& commonByteArray_LISTES_IPTOKI_Instruments.length == 0) {
						commonByteArray_LISTES_IPTOKI_Instruments = new byte[1024];
					} else {
						commonByteArray_LISTES_IPTOKI_Instruments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LISTES_IPTOKI_Instruments, 0,
						length);
				strReturn = new String(
						commonByteArray_LISTES_IPTOKI_Instruments, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LISTES_IPTOKI_Instruments) {

				try {

					int length = 0;

					this.lien = readString(dis);

					this.nom = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.lien, dos);

				// String

				writeString(this.nom, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("lien=" + lien);
			sb.append(",nom=" + nom);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.nom, other.nom);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LISTES_IPTOKI_Instruments = new byte[0];
		static byte[] commonByteArray_LISTES_IPTOKI_Instruments = new byte[0];

		public String ResponseContent;

		public String getResponseContent() {
			return this.ResponseContent;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LISTES_IPTOKI_Instruments.length) {
					if (length < 1024
							&& commonByteArray_LISTES_IPTOKI_Instruments.length == 0) {
						commonByteArray_LISTES_IPTOKI_Instruments = new byte[1024];
					} else {
						commonByteArray_LISTES_IPTOKI_Instruments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LISTES_IPTOKI_Instruments, 0,
						length);
				strReturn = new String(
						commonByteArray_LISTES_IPTOKI_Instruments, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LISTES_IPTOKI_Instruments) {

				try {

					int length = 0;

					this.ResponseContent = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ResponseContent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ResponseContent=" + ResponseContent);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHttpRequest_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();
				jsonStruct json = new jsonStruct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tFileOutputJSON_1 begin ] start
				 */

				ok_Hash.put("tFileOutputJSON_1", false);
				start_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());

				currentComponent = "tFileOutputJSON_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("json" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputJSON_1 = 0;

				int nb_line_tFileOutputJSON_1 = 0;
				java.io.File file_tFileOutputJSON_1 = new java.io.File(
						"./listes/instruments_fr.json");
				java.io.File dir_tFileOutputJSON_1 = file_tFileOutputJSON_1
						.getParentFile();
				if (dir_tFileOutputJSON_1 != null
						&& !dir_tFileOutputJSON_1.exists()) {
					dir_tFileOutputJSON_1.mkdirs();
				}
				java.io.PrintWriter outtFileOutputJSON_1 = new java.io.PrintWriter(
						new java.io.BufferedWriter(new java.io.FileWriter(
								"./listes/instruments_fr.json")));
				outtFileOutputJSON_1.append("{\"" + "instruments" + "\":[");
				boolean isFirst_tFileOutputJSON_1 = true;

				/**
				 * [tFileOutputJSON_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				jsonStruct json_tmp = new jsonStruct();
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tExtractRegexFields_3 begin ] start
				 */

				ok_Hash.put("tExtractRegexFields_3", false);
				start_Hash.put("tExtractRegexFields_3",
						System.currentTimeMillis());

				currentComponent = "tExtractRegexFields_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tExtractRegexFields_3 = 0;

				java.util.regex.Pattern pattern_tExtractRegexFields_3 = java.util.regex.Pattern
						.compile("^((?!:).)*$");

				/**
				 * [tExtractRegexFields_3 begin ] stop
				 */

				/**
				 * [tExtractRegexFields_2 begin ] start
				 */

				ok_Hash.put("tExtractRegexFields_2", false);
				start_Hash.put("tExtractRegexFields_2",
						System.currentTimeMillis());

				currentComponent = "tExtractRegexFields_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tExtractRegexFields_2 = 0;

				java.util.regex.Pattern pattern_tExtractRegexFields_2 = java.util.regex.Pattern
						.compile("/wiki/.*");

				/**
				 * [tExtractRegexFields_2 begin ] stop
				 */

				/**
				 * [tExtractRegexFields_1 begin ] start
				 */

				ok_Hash.put("tExtractRegexFields_1", false);
				start_Hash.put("tExtractRegexFields_1",
						System.currentTimeMillis());

				currentComponent = "tExtractRegexFields_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tExtractRegexFields_1 = 0;

				java.util.regex.Pattern pattern_tExtractRegexFields_1 = java.util.regex.Pattern
						.compile("<li>.*?<a href=\"(.*?)\" title=\"(.*?)\">(.*)</a>.*</li>");

				/**
				 * [tExtractRegexFields_1 begin ] stop
				 */

				/**
				 * [tHttpRequest_1 begin ] start
				 */

				ok_Hash.put("tHttpRequest_1", false);
				start_Hash.put("tHttpRequest_1", System.currentTimeMillis());

				currentComponent = "tHttpRequest_1";

				int tos_count_tHttpRequest_1 = 0;

				/**
				 * [tHttpRequest_1 begin ] stop
				 */

				/**
				 * [tHttpRequest_1 main ] start
				 */

				currentComponent = "tHttpRequest_1";

				int connectTimeOut_tHttpRequest_1 = Integer.valueOf(30) * 1000;
				int readTimeOut_tHttpRequest_1 = Integer.valueOf(0) * 1000;

				java.net.URL url_tHttpRequest_1 = new java.net.URL(
						"https://fr.wikipedia.org/wiki/Liste_des_instruments_de_musique");

				java.net.HttpURLConnection urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1
						.openConnection();
				urlConn_tHttpRequest_1.setRequestMethod("GET");
				urlConn_tHttpRequest_1.setDoOutput(true);
				urlConn_tHttpRequest_1.setDoInput(true);
				urlConn_tHttpRequest_1.setUseCaches(false);

				boolean connected_tHttpRequest_1 = false;
				int responseCode_tHttpRequest_1 = 0;
				globalMap.put("tHttpRequest_1_CONNECTED", false);
				try {
					urlConn_tHttpRequest_1.connect();
					connected_tHttpRequest_1 = true;
					globalMap.put("tHttpRequest_1_CONNECTED", true);

					byte[] buffer_tHttpRequest_1 = new byte[1024];
					int bos_buffer_tHttpRequest_1 = 0;
					StringBuilder sb_tHttpRequest_1 = new StringBuilder();

					responseCode_tHttpRequest_1 = urlConn_tHttpRequest_1
							.getResponseCode();
					globalMap.put("tHttpRequest_1_RESPONSE_CODE",
							responseCode_tHttpRequest_1);

					if (java.net.HttpURLConnection.HTTP_OK == responseCode_tHttpRequest_1) {
						java.io.InputStream bis_tHttpRequest_1 = new java.io.BufferedInputStream(
								urlConn_tHttpRequest_1.getInputStream());
						while ((bos_buffer_tHttpRequest_1 = bis_tHttpRequest_1
								.read(buffer_tHttpRequest_1)) != -1) {
							sb_tHttpRequest_1.append(new String(
									buffer_tHttpRequest_1, 0,
									bos_buffer_tHttpRequest_1));
						}
						bis_tHttpRequest_1.close();
					} else {
						String responseMessage_tHttpRequest_1 = urlConn_tHttpRequest_1
								.getResponseMessage();

						// get details response information which will be used
						// when error appear
						java.io.InputStream err_stream_tHttpRequest_1 = urlConn_tHttpRequest_1
								.getErrorStream();
						if (err_stream_tHttpRequest_1 != null) {
							java.io.InputStream es_tHttpRequest_1 = new java.io.BufferedInputStream(
									err_stream_tHttpRequest_1);
							java.io.ByteArrayOutputStream baos_tHttpRequest_1 = new java.io.ByteArrayOutputStream();

							byte[] buf_tHttpRequest_1 = new byte[1024];
							int read_tHttpRequest_1 = -1;
							try {
								while ((read_tHttpRequest_1 = es_tHttpRequest_1
										.read(buf_tHttpRequest_1)) > 0) {
									baos_tHttpRequest_1.write(
											buf_tHttpRequest_1, 0,
											read_tHttpRequest_1);
								}
							} finally {
								es_tHttpRequest_1.close();
							}

							responseMessage_tHttpRequest_1 += ("\n" + new String(
									baos_tHttpRequest_1.toByteArray()));
						}

						System.err.println(responseCode_tHttpRequest_1 + " "
								+ responseMessage_tHttpRequest_1);
						globalMap.put("tHttpRequest_1" + "_ERROR_MESSAGE",
								"Request failed:" + responseCode_tHttpRequest_1
										+ " " + responseMessage_tHttpRequest_1);
					}

					row1.ResponseContent = sb_tHttpRequest_1.toString();
					urlConn_tHttpRequest_1.disconnect();
				} catch (Exception e) {
					System.err.println(e.getMessage());
					globalMap.put("tHttpRequest_1" + "_ERROR_MESSAGE",
							e.getMessage());
				}

				tos_count_tHttpRequest_1++;

				/**
				 * [tHttpRequest_1 main ] stop
				 */

				/**
				 * [tHttpRequest_1 process_data_begin ] start
				 */

				currentComponent = "tHttpRequest_1";

				/**
				 * [tHttpRequest_1 process_data_begin ] stop
				 */

				/**
				 * [tExtractRegexFields_1 main ] start
				 */

				currentComponent = "tExtractRegexFields_1";

				// row1
				// row1

				if (execStat) {
					runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
				}

				row2 = null;
				if (row1.ResponseContent != null) {// C_01
					java.util.regex.Matcher matcher_tExtractRegexFields_1 = pattern_tExtractRegexFields_1
							.matcher(row1.ResponseContent);

					int groupCount_tExtractRegexFields_1 = matcher_tExtractRegexFields_1
							.groupCount();
					while (matcher_tExtractRegexFields_1.find()) {
						currentComponent = "tExtractRegexFields_1";

						try {
							row2 = new row2Struct();

							String temp_tExtractRegexFields_1 = null;
							row2.lien = groupCount_tExtractRegexFields_1 <= 0 ? ""
									: matcher_tExtractRegexFields_1.group(1);
							row2.nom = groupCount_tExtractRegexFields_1 <= 1 ? ""
									: matcher_tExtractRegexFields_1.group(2);
						} catch (java.lang.Exception ex_tExtractRegexFields_1) {
							throw (ex_tExtractRegexFields_1);
						}

						tos_count_tExtractRegexFields_1++;

						/**
						 * [tExtractRegexFields_1 main ] stop
						 */

						/**
						 * [tExtractRegexFields_1 process_data_begin ] start
						 */

						currentComponent = "tExtractRegexFields_1";

						/**
						 * [tExtractRegexFields_1 process_data_begin ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tExtractRegexFields_2 main ] start
							 */

							currentComponent = "tExtractRegexFields_2";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2"
										+ iterateId, 1, 1);
							}

							row3 = null;
							if (row2.lien != null) {// C_01
								java.util.regex.Matcher matcher_tExtractRegexFields_2 = pattern_tExtractRegexFields_2
										.matcher(row2.lien);

								int groupCount_tExtractRegexFields_2 = matcher_tExtractRegexFields_2
										.groupCount();
								while (matcher_tExtractRegexFields_2.find()) {
									currentComponent = "tExtractRegexFields_2";

									try {
										row3 = new row3Struct();
										row3.lien = row2.lien;
										row3.nom = row2.nom;

										String temp_tExtractRegexFields_2 = null;
									} catch (java.lang.Exception ex_tExtractRegexFields_2) {
										throw (ex_tExtractRegexFields_2);
									}

									tos_count_tExtractRegexFields_2++;

									/**
									 * [tExtractRegexFields_2 main ] stop
									 */

									/**
									 * [tExtractRegexFields_2 process_data_begin
									 * ] start
									 */

									currentComponent = "tExtractRegexFields_2";

									/**
									 * [tExtractRegexFields_2 process_data_begin
									 * ] stop
									 */
									// Start of branch "row3"
									if (row3 != null) {

										/**
										 * [tExtractRegexFields_3 main ] start
										 */

										currentComponent = "tExtractRegexFields_3";

										// row3
										// row3

										if (execStat) {
											runStat.updateStatOnConnection(
													"row3" + iterateId, 1, 1);
										}

										row4 = null;
										if (row3.lien != null) {// C_01
											java.util.regex.Matcher matcher_tExtractRegexFields_3 = pattern_tExtractRegexFields_3
													.matcher(row3.lien);

											int groupCount_tExtractRegexFields_3 = matcher_tExtractRegexFields_3
													.groupCount();
											while (matcher_tExtractRegexFields_3
													.find()) {
												currentComponent = "tExtractRegexFields_3";

												try {
													row4 = new row4Struct();
													row4.lien = row3.lien;
													row4.nom = row3.nom;

													String temp_tExtractRegexFields_3 = null;
												} catch (java.lang.Exception ex_tExtractRegexFields_3) {
													throw (ex_tExtractRegexFields_3);
												}

												tos_count_tExtractRegexFields_3++;

												/**
												 * [tExtractRegexFields_3 main ]
												 * stop
												 */

												/**
												 * [tExtractRegexFields_3
												 * process_data_begin ] start
												 */

												currentComponent = "tExtractRegexFields_3";

												/**
												 * [tExtractRegexFields_3
												 * process_data_begin ] stop
												 */
												// Start of branch "row4"
												if (row4 != null) {

													/**
													 * [tMap_1 main ] start
													 */

													currentComponent = "tMap_1";

													// row4
													// row4

													if (execStat) {
														runStat.updateStatOnConnection(
																"row4"
																		+ iterateId,
																1, 1);
													}

													boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

													// ###############################
													// # Input tables (lookups)
													boolean rejectedInnerJoin_tMap_1 = false;
													boolean mainRowRejected_tMap_1 = false;

													// ###############################
													{ // start of Var scope

														// ###############################
														// # Vars tables

														Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
														// ###############################
														// # Output tables

														json = null;
														out1 = null;

														// # Output table :
														// 'json'
														json_tmp.nom = row4.nom;
														json_tmp.lien = "http://fr.wikipedia.org"
																+ row4.lien;
														json = json_tmp;

														// # Output table :
														// 'out1'
														out1_tmp.nom = row4.nom;
														out1_tmp.lien = "http://fr.wikipedia.org"
																+ row4.lien;
														out1 = out1_tmp;
														// ###############################

													} // end of Var scope

													rejectedInnerJoin_tMap_1 = false;

													tos_count_tMap_1++;

													/**
													 * [tMap_1 main ] stop
													 */

													/**
													 * [tMap_1
													 * process_data_begin ]
													 * start
													 */

													currentComponent = "tMap_1";

													/**
													 * [tMap_1
													 * process_data_begin ] stop
													 */
													// Start of branch "json"
													if (json != null) {

														/**
														 * [tFileOutputJSON_1
														 * main ] start
														 */

														currentComponent = "tFileOutputJSON_1";

														// json
														// json

														if (execStat) {
															runStat.updateStatOnConnection(
																	"json"
																			+ iterateId,
																	1, 1);
														}

														org.json.simple.JSONObject jsonRowtFileOutputJSON_1 = new org.json.simple.JSONObject();
														if (json.nom != null) {

															jsonRowtFileOutputJSON_1
																	.put("nom",
																			json.nom);

														} else {
															jsonRowtFileOutputJSON_1
																	.put("nom",
																			null);
														}

														if (json.lien != null) {

															jsonRowtFileOutputJSON_1
																	.put("lien",
																			json.lien);

														} else {
															jsonRowtFileOutputJSON_1
																	.put("lien",
																			null);
														}

														if (!isFirst_tFileOutputJSON_1) {
															outtFileOutputJSON_1
																	.append(",");
														}
														isFirst_tFileOutputJSON_1 = false;
														outtFileOutputJSON_1
																.append(jsonRowtFileOutputJSON_1
																		.toJSONString());
														nb_line_tFileOutputJSON_1++;

														tos_count_tFileOutputJSON_1++;

														/**
														 * [tFileOutputJSON_1
														 * main ] stop
														 */

														/**
														 * [tFileOutputJSON_1
														 * process_data_begin ]
														 * start
														 */

														currentComponent = "tFileOutputJSON_1";

														/**
														 * [tFileOutputJSON_1
														 * process_data_begin ]
														 * stop
														 */

														/**
														 * [tFileOutputJSON_1
														 * process_data_end ]
														 * start
														 */

														currentComponent = "tFileOutputJSON_1";

														/**
														 * [tFileOutputJSON_1
														 * process_data_end ]
														 * stop
														 */

													} // End of branch "json"

													// Start of branch "out1"
													if (out1 != null) {

														/**
														 * [tLogRow_1 main ]
														 * start
														 */

														currentComponent = "tLogRow_1";

														// out1
														// out1

														if (execStat) {
															runStat.updateStatOnConnection(
																	"out1"
																			+ iterateId,
																	1, 1);
														}

														// /////////////////////

														strBuffer_tLogRow_1 = new StringBuilder();

														if (out1.nom != null) { //

															strBuffer_tLogRow_1
																	.append(String
																			.valueOf(out1.nom));

														} //

														strBuffer_tLogRow_1
																.append("|");

														if (out1.lien != null) { //

															strBuffer_tLogRow_1
																	.append(String
																			.valueOf(out1.lien));

														} //

														if (globalMap
																.get("tLogRow_CONSOLE") != null) {
															consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
																	.get("tLogRow_CONSOLE");
														} else {
															consoleOut_tLogRow_1 = new java.io.PrintStream(
																	new java.io.BufferedOutputStream(
																			System.out));
															globalMap
																	.put("tLogRow_CONSOLE",
																			consoleOut_tLogRow_1);
														}
														consoleOut_tLogRow_1
																.println(strBuffer_tLogRow_1
																		.toString());
														consoleOut_tLogRow_1
																.flush();
														nb_line_tLogRow_1++;
														// ////

														// ////

														// /////////////////////

														tos_count_tLogRow_1++;

														/**
														 * [tLogRow_1 main ]
														 * stop
														 */

														/**
														 * [tLogRow_1
														 * process_data_begin ]
														 * start
														 */

														currentComponent = "tLogRow_1";

														/**
														 * [tLogRow_1
														 * process_data_begin ]
														 * stop
														 */

														/**
														 * [tLogRow_1
														 * process_data_end ]
														 * start
														 */

														currentComponent = "tLogRow_1";

														/**
														 * [tLogRow_1
														 * process_data_end ]
														 * stop
														 */

													} // End of branch "out1"

													/**
													 * [tMap_1 process_data_end
													 * ] start
													 */

													currentComponent = "tMap_1";

													/**
													 * [tMap_1 process_data_end
													 * ] stop
													 */

												} // End of branch "row4"

												// end for
											}

										} // C_01

										/**
										 * [tExtractRegexFields_3
										 * process_data_end ] start
										 */

										currentComponent = "tExtractRegexFields_3";

										/**
										 * [tExtractRegexFields_3
										 * process_data_end ] stop
										 */

									} // End of branch "row3"

									// end for
								}

							} // C_01

							/**
							 * [tExtractRegexFields_2 process_data_end ] start
							 */

							currentComponent = "tExtractRegexFields_2";

							/**
							 * [tExtractRegexFields_2 process_data_end ] stop
							 */

						} // End of branch "row2"

						// end for
					}

				} // C_01

				/**
				 * [tExtractRegexFields_1 process_data_end ] start
				 */

				currentComponent = "tExtractRegexFields_1";

				/**
				 * [tExtractRegexFields_1 process_data_end ] stop
				 */

				/**
				 * [tHttpRequest_1 process_data_end ] start
				 */

				currentComponent = "tHttpRequest_1";

				/**
				 * [tHttpRequest_1 process_data_end ] stop
				 */

				/**
				 * [tHttpRequest_1 end ] start
				 */

				currentComponent = "tHttpRequest_1";

				ok_Hash.put("tHttpRequest_1", true);
				end_Hash.put("tHttpRequest_1", System.currentTimeMillis());

				/**
				 * [tHttpRequest_1 end ] stop
				 */

				/**
				 * [tExtractRegexFields_1 end ] start
				 */

				currentComponent = "tExtractRegexFields_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tExtractRegexFields_1", true);
				end_Hash.put("tExtractRegexFields_1",
						System.currentTimeMillis());

				/**
				 * [tExtractRegexFields_1 end ] stop
				 */

				/**
				 * [tExtractRegexFields_2 end ] start
				 */

				currentComponent = "tExtractRegexFields_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tExtractRegexFields_2", true);
				end_Hash.put("tExtractRegexFields_2",
						System.currentTimeMillis());

				/**
				 * [tExtractRegexFields_2 end ] stop
				 */

				/**
				 * [tExtractRegexFields_3 end ] start
				 */

				currentComponent = "tExtractRegexFields_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tExtractRegexFields_3", true);
				end_Hash.put("tExtractRegexFields_3",
						System.currentTimeMillis());

				/**
				 * [tExtractRegexFields_3 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputJSON_1 end ] start
				 */

				currentComponent = "tFileOutputJSON_1";

				outtFileOutputJSON_1.print("]}");
				outtFileOutputJSON_1.close();
				globalMap.put("tFileOutputJSON_1_NB_LINE",
						nb_line_tFileOutputJSON_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("json" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputJSON_1", true);
				end_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);

				/**
				 * [tFileOutputJSON_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHttpRequest_1 finally ] start
				 */

				currentComponent = "tHttpRequest_1";

				/**
				 * [tHttpRequest_1 finally ] stop
				 */

				/**
				 * [tExtractRegexFields_1 finally ] start
				 */

				currentComponent = "tExtractRegexFields_1";

				/**
				 * [tExtractRegexFields_1 finally ] stop
				 */

				/**
				 * [tExtractRegexFields_2 finally ] start
				 */

				currentComponent = "tExtractRegexFields_2";

				/**
				 * [tExtractRegexFields_2 finally ] stop
				 */

				/**
				 * [tExtractRegexFields_3 finally ] start
				 */

				currentComponent = "tExtractRegexFields_3";

				/**
				 * [tExtractRegexFields_3 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputJSON_1 finally ] start
				 */

				currentComponent = "tFileOutputJSON_1";

				/**
				 * [tFileOutputJSON_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				String fichier = "./listes/instruments_fr.json";

				java.nio.file.Path path = java.nio.file.Paths.get(fichier);
				java.nio.charset.Charset charset = java.nio.charset.StandardCharsets.UTF_8;

				String content = new String(
						java.nio.file.Files.readAllBytes(path), charset);
				content = content.replace("\\", "");
				content = content.replace(" class=\"mw-redirect\"", "");
				content = content.replace(" class=\"mw-disambig\"", "");

				java.nio.file.Files.write(path, content.getBytes(charset));

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 process_data_begin ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_begin ] stop
				 */

				/**
				 * [tJava_1 process_data_end ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Instruments InstrumentsClass = new Instruments();

		int exitCode = InstrumentsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Instruments.class.getClassLoader()
					.getResourceAsStream(
							"listes_iptoki/instruments_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = Instruments.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tHttpRequest_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tHttpRequest_1) {
			globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", -1);

			e_tHttpRequest_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Instruments");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 73967 characters generated by Talend Open Studio for Data Integration on the
 * 23 juin 2019 12:57:26 EDT
 ************************************************************************************************/
